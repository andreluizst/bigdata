teste=valor 			=>		criar e atribuir variavel de ambiente local no bash
encho teste				=>		imprime o texto "teste" no terminal
echo=$teste				=>		exibe o conteúdo da variável teste
unset=teste				=>		remove a variábel do ambiente
export teste			=>		torna a variável teste como global para ser acessível por todo o sistema, inclusive outros BASHs
teste=(5 6 7 8)			=>		Os elementos do array devem estar dentro de parenteses e separados por um "espaço em branco".
echo ${teste[*]}		=>		exibe todos os elementos do array
echo ${teste[0]}		=>		exibe o primeiro elemento do array
teste[1]=9				=>		altera o elemento na posição 1 do array
unset teste[2]			=>		remove o elemento na posição 2 do array
unset teste
teste=(a b c)
teste[3]=d				=>		adiciona a letra d na posição 3 (criada dinamicamente) do array
alias					=> 		exibe todos os apelidos criados no sistema
alias lsl="ls -l"		=>		cria um apelido (lsl) para o comando ls com parêmetro -l
unalias lsl				=>		remove o apelido
func_teste() {
> echo testando funções.
> echo essas funções funcional analogamente como as stored procedures
> echo e podem ser executadas no bash ou chamados dentro de scripts.
> }
func_palavra(){
> echo "Linha acrescentada" >> arquivo_func_palavra.txt
> }
typeset -f				=>		exibe todas as funções definidas no sistema
func_teste				=>		executa a função func_teste criada anteriormente
ls > arq.txt			=>		redireciona o retorno do comando ls para o arquivo arq.txt e caso esse arquivo já exista, será sobrescrito
ls >> arq.txt			=>		redireciona o retorno do comando ls e cria o arq.txt caso não exista. Se existir o retorno será adicionado ao arquivo existente.
var=`date +%Y-%m-%d_%H-%M`	=>	retorna o retorno da comando date formatado (ex: 2020-01-20_23-15) para var usando `(crase)
wc < arq.txt			=>		redireciona o conteúdo do arq.txt para o comando wc
wc << EOF
> linha 1
> linha 2
> EOF						=>		retorna todas as linhas após o EOF (pode ser qualquer palavra)
var1=$[2+2]					=>		atribui o resultado do cálculo [2+2] em var1. Cálculos devem ser realizados entre [] (colchetes)
echo $?						=>		retorna o código de status do último comando executado que pode ser de 0 até 255, sendo 0 = sucesso
códigos de status +comuns	=>		0=sucesso, 1=Erro geral desconhecido, 126=Comando não encontrato(permissão), 127=Comando não encontrato,
									130=Comando terminado com Ctrl+C
if test condição
	comandos...
fi							=>		bloco if utilizando teste condicional.
if [ condição ]
	comandos...
fi							=>		mesmo que o comando anterior
comparadores numéricos		=>		-eq, -gt, -ge, -lt, -le
comparadores de string		=>		=, !=, < (menor em ordem alfabética), > (maior em ordem alfabética),
									-n (verifica se o comprimento é maior que zero),
									-z (verifica se a string tem comprimento igual a zero)
case $var in
	caso1)
		comandos;;
	caso2)
		comandos;;
	caso3 ou caso4)
		comandos;;
	*)
		Comandos padrão;;
Esac
for valor in valores
do
	comandos
done
for ((i=1;i<=15;i++))
do
	comandos
done
while [ comando_teste ]
do
	comandos
done
until [ comando teste ]
do
	comandos
done